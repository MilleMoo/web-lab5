<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Catalog Manager</title>
    <link rel="stylesheet" href="/style.css"> </head>
<body>
    <div class="container">
        <h1>ðŸ“š Simple Book Catalog Manager</h1>
        <h3>Create By Gemini Sud Lor</h3>

        <div class="form-container" id="form-container">
            <h2 id="form-title">Add a New Book</h2>
            <form id="book-form">
                <input type="hidden" id="book-id" name="id">
                <div class="form-group">
                    <label for="title">Title</label>
                    <input type="text" id="title" name="title" required>
                </div>
                <div class="form-group">
                    <label for="author">Author</label>
                    <input type="text" id="author" name="author" required>
                </div>
                <div class="form-group">
                    <label for="publishedYear">Published Year</label>
                    <input type="number" id="publishedYear" name="publishedYear" required>
                </div>
                <div class="form-actions">
                    <button type="submit" id="submit-button">Add Book</button>
                    <button type="button" id="cancel-button" class="hidden" onclick="resetForm()">Cancel</button>
                </div>
            </form>
        </div>

        <div class="book-list-container">
            <h2>Book List</h2>
            <table id="book-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Year</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="book-list">
                    <% books.forEach(book => { %>
                        <tr id="book-<%= book._id %>">
                            <td><%= book.title %></td>
                            <td><%= book.author %></td>
                            <td><%= book.publishedYear %></td>
                            <td>
                                <button class="btn-edit" onclick="editBook('<%= book._id %>', '<%= book.title %>', '<%= book.author %>', '<%= book.publishedYear %>')">Edit</button>
                                <button class="btn-delete" onclick="deleteBook('<%= book._id %>')">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        const form = document.getElementById('book-form');
        const formTitle = document.getElementById('form-title');
        const bookIdField = document.getElementById('book-id');
        const submitButton = document.getElementById('submit-button');
        const cancelButton = document.getElementById('cancel-button');
        const apiEndpoint = '/api/books';

        function resetForm() {
            form.reset();
            bookIdField.value = '';
            formTitle.textContent = 'Add a New Book';
            submitButton.textContent = 'Add Book';
            cancelButton.classList.add('hidden');
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const id = bookIdField.value;
            const isUpdating = !!id;

            const bookData = {
                title: form.title.value,
                author: form.author.value,
                publishedYear: form.publishedYear.value
            };

            try {
                const response = await fetch(isUpdating ? `${apiEndpoint}/${id}` : apiEndpoint, {
                    method: isUpdating ? 'PUT' : 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookData)
                });
                
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                
                location.reload(); 

            } catch (error) {
                console.error('Error submitting form:', error);
                alert('Failed to save book. Please check console for details.');
            }
        });

        function editBook(id, title, author, year) {
            bookIdField.value = id;
            form.title.value = title;
            form.author.value = author;
            form.publishedYear.value = year;
            
            formTitle.textContent = 'Edit Book';
            submitButton.textContent = 'Update Book';
            cancelButton.classList.remove('hidden');

            document.getElementById('form-container').scrollIntoView({ behavior: 'smooth' });
        }

        async function deleteBook(id) {
            if (!confirm('Are you sure you want to delete this book?')) {
                return;
            }
            try {
                const response = await fetch(`${apiEndpoint}/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error('Failed to delete book');
                }
                
                document.getElementById(`book-${id}`).remove();

            } catch (error) {
                console.error('Error deleting book:', error);
                alert('Failed to delete book.');
            }
        }
    </script>
</body>
</html>